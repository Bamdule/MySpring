<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans   
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/security  
		http://www.springframework.org/schema/security/spring-security.xsd">
    
    <security:http pattern="/resources/**" security="none"/>
    <!--<security:http pattern="**/*.jsp" security="none"/>-->
    <!--<security:http pattern="/office/api/**" security="none"/>-->
    
    <security:http auto-config="true" use-expressions="true" >
        <security:intercept-url pattern="/login" access="permitAll" />
        <security:intercept-url pattern="/**" access="isAuthenticated()" />
        <security:form-login 
            login-page="/login" 
            login-processing-url="/login"
            default-target-url="/"
            always-use-default-target="true"
            authentication-failure-url="/login?error=true"
            username-parameter="account"
            password-parameter="password" />
        <security:logout
            logout-url="/logout" 
            logout-success-url="/login"
            delete-cookies="JSESSIONID"
            invalidate-session="true" />
        <!--<security:custom-filter ref="ajaxSessionTimeoutFilter" after="EXCEPTION_TRANSLATION_FILTER"/>-->
        <security:access-denied-handler error-page="/notAllow" />
    </security:http>
    
    <!--    <security:authentication-manager>
        <security:authentication-provider ref="authenticationProvider" />
    </security:authentication-manager>-->
    
    <security:authentication-manager>
        <security:authentication-provider>
            <security:jdbc-user-service
                data-source-ref="dataSource"
                users-by-username-query="SELECT account as 'username' , password, true as 'enabled' from member where account = ?"
                authorities-by-username-query="SELECT account as 'username',d.role as 'authority' FROM member a JOIN member_group b ON (b.id = a.member_group_id) JOIN member_group_authoritys c ON (c.member_group_id = b.id) JOIN authority d ON (d.id = c.authority_id) WHERE a.account = ?"
            />
        </security:authentication-provider>
    </security:authentication-manager>
    
    <!--<bean id="ajaxSessionTimeoutFilter" class="com.bamdule.common.auth.AjaxSessionTimeoutFilter" />-->
    <!--<bean id="authenticationProvider" class="com.bamdule.common.auth.CustomAuthenticationProvider" />-->
    <!--authorities-by-username-query="select username, authority from authorities where username=?"-->
</beans>
